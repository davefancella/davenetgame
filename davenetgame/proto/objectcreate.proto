/*   Copyright 2016 Dave Fancella

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
   */

syntax = "proto2";

// A create object message
message ObjectCreate {
    required fixed32 id = 1;
    required fixed32 mtype = 2;
    required double timestamp = 3;
    // The typeId for the game object
    required fixed32 otype = 4;
    // The owner of the game object.  It must be the ID of another game object.  The only
    // game objects that can exist without an owner are Player objects, so the 'optional' nature
    // of this field isn't really optional.  A special value of -1 tells the receiving client
    // that it owns the object, while a value of 0 tells the receiving client that the object
    // is a player-level object.  The mtype also says that, but since a developer can create
    // their own player type, it's not a reliable way to tell if this one is a player object.
    optional sint32 owner = 5;
    
    // A struct.pack encoded string of initial values for the object.  If included, you must
    // also ensure that value_string is included as well, so that this field can be unpacked.
    optional string initial_values = 6;
    
    // A format string to be passed to the struct module to unpack initial_values.  Without this,
    // the decoder will not be able to unpack those values.
    optional string value_string = 7;
}


