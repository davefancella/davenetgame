#!/usr/bin/env python

'''

   Copyright 2016 Dave Fancella

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

'''

import socket
import sys, traceback
from davenetgame import exceptions
import getpass # for convenience

import readline

from davenetgame import client_callback
from davenetgame.messages import pedia

import curses

mainMenu = [ 
            "Play Game",
            "Internet Game",
            "Exit",
]

def main(mainscr):
    global mainMenu
    
    rooty, rootx = mainscr.getmaxyx()

    choice = enter_menu(rootx, rooty, mainMenu)
    
    if choice == 0:
        pass
    elif choice == 1:
        pass
    elif choice == 2:
        pass
    else:
        pass
    
    mainscr.clrtoeol()
    mainscr.refresh()
    
    return 0

def enter_menu(rootx, rooty, menu):
    choices = menu
    
    menu_win = None
    highlight = 1
    choice = 0
    c = None

    # Compute longest choice so we can size the menu accordingly
    longestChoice = 0
    for a in choices:
        if len(a) > longestChoice:
            longestChoice = len(a)
            
    # Add appropriate padding to the size of the choices to allow for border decorations.  Unlike in html, border decorations
    # will be inside the padding, so the padding must always be at least 1.
    x_padding = 8
    y_padding = 2
    
    x_itemDisplaySize = longestChoice + 2 * x_padding
    y_itemDisplaySize = len(choices) + 2 * y_padding
    
    x_loc = (rootx - x_itemDisplaySize)/2
    y_loc = (rooty - y_itemDisplaySize)/2

    menu_win = curses.newwin(y_itemDisplaySize, x_itemDisplaySize, y_loc, x_loc)
    menu_win.keypad(True)
    
    keepGoing = True
    
    print_menu(menu_win, highlight, choices, len(choices), y_padding, longestChoice, x_padding)
    
    while(keepGoing):
        c = menu_win.getch()
        if c == curses.KEY_UP:
            if(highlight == 1):
                highlight = len(choices)
            else:
                highlight -= 1
        elif c == curses.KEY_DOWN:
            if(highlight == len(choices)):
                highlight = 1
            else:
                highlight += 1
        elif c == 10:
            choice = highlight
        else:
            #mainscr.addstr(24, 0, "Character pressed is = %3d Hopefully it can be printed as '%c'" % (c, c) )
            mainscr.refresh()
        
        print_menu(menu_win, highlight, choices, len(choices), y_padding, longestChoice, x_padding)
        
        if(choice != 0): # User did a choice come out of the infinite loop
            keepGoing = False
            
    return choice


def print_menu(menu_win, highlight, choices, y_menuSize, y_padding, x_menuSize, x_padding):
    size_y, size_x = menu_win.getmaxyx()
    
    # Make room for the border
    x_padding -= 2
    x_offset = 1 + x_padding/2
    
    y_padding -= 2
    y_offset = 1 + y_padding/2
    
    x = x_offset
    y = y_offset + 1
    
    menu_win.border( 0, 0, 0, 0)
    
    for i in range(len(choices) ):
        if(highlight == (i + 1) ): # High light the present choice
            menu_win.addstr(y, x, choices[i], curses.A_REVERSE)
        else:
            menu_win.addstr(y, x, choices[i])
        y += 1
    
    menu_win.refresh()

if __name__ == "__main__":
    mainscr = curses.initscr()
    
    # Save the current state of the terminal.  We'll catch exceptions and re-raise them, but we need to
    # restore the terminal when we do so.
    curses.def_shell_mode()
    
    #curses.clear()
    curses.noecho()
    curses.cbreak()   # Line buffering disabled. pass on everything
    
    hasException = False
    
    try:
        main(mainscr)
    except:
        hasException = True
    finally:
        curses.endwin()
        curses.reset_shell_mode()
    
    if hasException:
        print "Exception in user code:"
        print '-'*60
        traceback.print_exc(file=sys.stdout)
        print '-'*60
    
    
    
    
    





