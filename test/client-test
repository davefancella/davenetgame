#!/usr/bin/env python

'''

   Copyright 2016 Dave Fancella

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

'''

import socket

import sys
sys.path.insert(0, '')

from libdavenetgame import exceptions
import getpass # for convenience

import readline
from libdavenetgame import client_callback
from libdavenetgame.messages import pedia

# create dgram udp socket
try:
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
except socket.error:
    print 'Failed to create socket'
    sys.exit()
 
host = 'localhost'
port = 8888
name = getpass.getuser()

print "Starting test client."

## Help text for commands.
commands = {
    'set' : { 'usage' : "Usage: set (host|port|name) value",
              'desc'  : "Set the host or port to which you intend to connect" },
    'connect' : { 'usage' : "connect [host:port]",
              'desc'  : "Connect to the host and port given, either previously specified, or currently specified" },
    'ping' : { 'usage' : "ping",
               'desc'  : "Ping the server to which you are connected.  You must be connected for this to work."
              },
    'logout' : { 'usage' : "logout",
               'desc'  : "Log out from the server.  You must be connected for this to work."
              },
    'help' : { 'usage' : "help [command]",
              'desc'  : "Print this helpful text.  Alternately, type in a command to see its helpful text." },
    'status' : { 'usage' : "status",
              'desc'  : "Display the status of the current connection." },
    'quit' : { 'usage' : "quit",
              'desc'  : "Quit the test client." },
}

messageList = pedia.getPedia()

def Help(command=None):
    global commands
    
    if command is not None:
        if commands.has_key(command):
            print "%10s : %s" % (command, commands[command]["desc"])
            print "%13s %s" % (" ", commands[command]['usage'])
            print
        else:
            print "Command not found."
    else:
        for key, value in commands.iteritems():
            print "%10s : %s" % (key, value["desc"] )
            print "%13s %s" % (" ", value['usage'] )
            print

theClient = None

keepGoing = True

try:
    while(keepGoing) :
        msg = raw_input('')
        
        args = msg.split(" ")
        
        command = args.pop(0)
        
        command = command.lower()
        
        # Ignore simple presses of enter
        if command == '':
            continue
        
        if command == "set":
            if len(args) != 2:
                print "Usage: set (host|port|name) value"
            else:
                if args[0].lower() == "host":
                    host = args[1]
                if args[0].lower() == "port":
                    port = int(args[1])
                if args[0].lower() == "name":
                    name = args[1]
        elif command == "connect":
            if len(args) == 1:
                host, port = args[0].strip().split(":")
                port = int(port)
                
            if host is not None:
                if port is not None:
                    if name is not None:
                        # Create the client object and login
                        if theClient is None:
                            theClient = client_callback.ClientCallback()
                            theClient.SetHost(host)
                            theClient.SetPort(port)
                            theClient.Start()
                else:
                    print "You must specify a port to connect to"
            else:
                print "You must specify a host to connect to"
        elif command == "logout":
            theClient.Stop()
            theClient = None
        elif command == "quit":
            if theClient is not None:
                theClient.Stop()
                theClient = None
            keepGoing = False
        elif command == "help":
            if len(args) < 1:
                Help()
            else:
                Help(args[0])
        elif command == "ping":
            if theClient is None:
                print "You must be connected to a server to ping!"
            else:
                theClient.SendPing()
        elif command == "status":
            if theClient is None:
                print "You are not connected to a server."
            else:
                print theClient.StatusString()
                print "Bytes received: " + str(theClient.BytesReceived() )
                print "Bytes sent: " + str(theClient.BytesSent() )
                print "Bytes transferred: " + str(theClient.Bandwidth() )
        else:
            print "Command not recognized."
            
except KeyboardInterrupt:
    print "Quitting due to keyboard interrupt"

if theClient is not None:
    theClient.Stop()
print



