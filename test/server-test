#!/usr/bin/env python3
# -*- coding: utf-8 -*-

'''

   Copyright 2016 Dave Fancella

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

'''

from time import sleep
import time, sys

import readline

import sys
sys.path.insert(0, '')

from davenetgame.dispatch import dispatcher
from davenetgame.transport import udp
from davenetgame.protocol import realtime

from davenetgame.gameobjects import player

# For the test server, this is a brief and mostly useless game engine whose purpose in life
# is to make it possible for us to examine the game state of a simple game while testing parts
# of the library
class Game(object):
    # Connected players
    __players = None
    
    def __init__(self, **args):
        self.__players = []
        
    def LoginEvent(self, **event):
        aPlayer = player.nPlayer(connection=event['data'] )
        
        print(aPlayer.playername + " has logged in.")
    
if __name__=='__main__':
    HOST = ''   # Symbolic name meaning all available interfaces
    PORT = 8888 # Arbitrary non-privileged port

    # First, set up the network library.
    
    theServer = dispatcher.EventDispatcherServer()
    theProtocol = realtime.RealtimeServer(
                                        core = True
                                        )
    theTransport = udp.Udp(isserver=True,
                            clienthost=HOST,
                            clientport=PORT,
                            owner=theProtocol)
    theProtocol.SetTransport(theTransport)
    theProtocol.BindTransport()

    theServer.AddProtocol(theProtocol)

    # Second, setup the game object
    theGame = Game()
    theServer.RegisterCallback('login', theGame.LoginEvent)

    # Third, start the server
    theServer.Start()
    keepGoing = True

    try:
        while(keepGoing) :
            theServer.Update(time.time() )
            
    except KeyboardInterrupt:
        print("Quitting due to keyboard interrupt")

    theServer.Stop()
    print()

    sys.exit()

    
    
    


